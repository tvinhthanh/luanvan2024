import React, { useState, useEffect } from "react";
import { useMutation, useQueryClient, useQuery } from "react-query";
import { useNavigate } from "react-router-dom";
import * as apiClient from "../../../api-client";
import { OwnerType, PetType, MedicType, MedicationType } from "../../../../../backend/src/shared/types";
import { useAppContext } from "../../../contexts/AppContext";

const AddMedicalRecord: React.FC = () => {
  const { id_vet } = useAppContext();
  const [petId, setPetId] = useState("");
  const [ownerId, setOwnerId] = useState("");
  const [visitDate, setVisitDate] = useState("");
  const [reasonForVisit, setReasonForVisit] = useState("");
  const [symptoms, setSymptoms] = useState("");
  const [diagnosis, setDiagnosis] = useState("");
  const [treatmentPlan, setTreatmentPlan] = useState("");
  const [medications, setMedications] = useState<MedicationType[]>([]);
  const [notes, setNotes] = useState("");
  const [pets, setPets] = useState<PetType[]>([]);
  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const { data: owners = [], isLoading: isOwnersLoading, error: ownersError } = useQuery<OwnerType[]>(
    "fetchOwners",
    apiClient.fetchOwner,
    {
      onError: (err) => {
        console.error("Error fetching owners:", err);
      },
    }
  );

  useEffect(() => {
    const fetchPets = async () => {
      if (ownerId) {
        try {
          const fetchedPets = await apiClient.fetchPetByOwnerId(ownerId);
          setPets(fetchedPets);
        } catch (error) {
          console.error("Error fetching pets:", error);
        }
      } else {
        setPets([]);
      }
    };

    fetchPets();
  }, [ownerId]);

  const addMedicalRecordMutation = useMutation(apiClient.createMedicalRecord, {
    onSuccess: () => {
      queryClient.invalidateQueries(["fetchMedicalRecordsForVet", id_vet]);
      navigate(`/medical-records`);
    },
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const newMedicalRecord: MedicType = {
        _id: "", // This will be generated by MongoDB
        petId,
        ownerId,
        vetId: id_vet,
        visitDate: new Date(visitDate),
        reasonForVisit,
        symptoms,
        diagnosis,
        treatmentPlan,
        medications, // Ensure medications are passed correctly
        notes,
      };

      await addMedicalRecordMutation.mutateAsync(newMedicalRecord);
    } catch (error) {
      console.error("Error adding medical record:", error);
    }
  };

  if (isOwnersLoading) {
    return <span>Loading owners...</span>;
  }

  if (ownersError) {
    return <span>Error loading owners</span>;
  }

  const handleAddMedication = () => {
    setMedications([...medications, { name: "", dosage: "", instructions: "" }]);
  };

  const handleMedicationChange = (index: number, field: string, value: string) => {
    const updatedMedications = medications.map((medication, i) =>
      i === index ? { ...medication, [field]: value } : medication
    );
    setMedications(updatedMedications);
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Add Medical Record</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">Owner</label>
          <select
            value={ownerId}
            onChange={(e) => setOwnerId(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
            required
          >
            <option value="">Select Owner</option>
            {owners.map((owner) => (
              <option key={owner._id} value={owner._id}>
                {owner.name}
              </option>
            ))}
          </select>
        </div>
        {ownerId && (
          <div>
            <label className="block text-sm font-medium text-gray-700">Pet</label>
            <select
              value={petId}
              onChange={(e) => setPetId(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md p-2"
              required
            >
              <option value="">Select Pet</option>
              {pets.map((pet) => (
                <option key={pet._id} value={pet._id}>
                  {pet.name}
                </option>
              ))}
            </select>
          </div>
        )}
        <div>
          <label className="block text-sm font-medium text-gray-700">Visit Date</label>
          <input
            type="date"
            value={visitDate}
            onChange={(e) => setVisitDate(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Reason for Visit</label>
          <input
            type="text"
            value={reasonForVisit}
            onChange={(e) => setReasonForVisit(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
            required
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Symptoms</label>
          <input
            type="text"
            value={symptoms}
            onChange={(e) => setSymptoms(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Diagnosis</label>
          <input
            type="text"
            value={diagnosis}
            onChange={(e) => setDiagnosis(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Treatment Plan</label>
          <input
            type="text"
            value={treatmentPlan}
            onChange={(e) => setTreatmentPlan(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Medications</label>
          {medications.map((medication, index) => (
            <div key={index} className="mt-1 flex space-x-2">
              <input
                type="text"
                value={medication.name}
                onChange={(e) => handleMedicationChange(index, "name", e.target.value)}
                placeholder="Name"
                className="block w-1/3 border border-gray-300 rounded-md p-2"
                required
              />
              <input
                type="text"
                value={medication.dosage}
                onChange={(e) => handleMedicationChange(index, "dosage", e.target.value)}
                placeholder="Dosage"
                className="block w-1/3 border border-gray-300 rounded-md p-2"
                required
              />
              <input
                type="text"
                value={medication.instructions}
                onChange={(e) => handleMedicationChange(index, "instructions", e.target.value)}
                placeholder="Instructions"
                className="block w-1/3 border border-gray-300 rounded-md p-2"
                required
              />
            </div>
          ))}
          <button
            type="button"
            onClick={handleAddMedication}
            className="mt-2 bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
          >
            Add Medication
          </button>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Notes</label>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
          />
        </div>
        <button
          type="submit"
          className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
        >
          Add Medical Record
        </button>
      </form>
    </div>
  );
};

export default AddMedicalRecord;
