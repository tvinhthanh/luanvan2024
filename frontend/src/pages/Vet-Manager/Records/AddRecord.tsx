import React, { useState, useEffect } from "react";
import { useMutation, useQueryClient, useQuery } from "react-query";
import { useNavigate } from "react-router-dom";
import * as apiClient from "../../../api-client";
import { OwnerType, PetType, RecordType } from "../../../../../backend/src/shared/types";
import { useAppContext } from "../../../contexts/AppContext";

const AddRecords: React.FC = () => {
  const { id_vet } = useAppContext();
  const [petId, setPetId] = useState("");
  const [ownerEmail, setOwnerEmail] = useState("");
  const [pets, setPets] = useState<PetType[]>([]);

  const navigate = useNavigate();
  const queryClient = useQueryClient();

  const { data: owners = [], isLoading: isOwnersLoading, error: ownersError } = useQuery<OwnerType[]>(
    "fetchOwners",
    apiClient.fetchOwner,
    {
      onError: (err) => {
        console.error("Error fetching owners:", err);
      },
    }
  );

  useEffect(() => {
    const fetchPets = async () => {
      if (ownerEmail) {
        try {
          const fetchedPets: PetType[] = await apiClient.fetchPetByOwnerId(ownerEmail); // Correctly type the response
          setPets(fetchedPets); // Correctly assign the response to the state
        } catch (error) {
          console.error("Error fetching pets:", error);
        }
      } else {
        setPets([]);
      }
    };

    fetchPets();
  }, [ownerEmail]);

  const addMedicalRecordMutation = useMutation(apiClient.createRecord, {
    onSuccess: () => {
      queryClient.invalidateQueries(["fetchRecordsForVet", id_vet]);
      navigate(`/record-info`);
    },
    onError:()=>{
      alert("Pet đã có bệnh án");
    }
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const newRecord: RecordType = {
        _id: "", // This will be generated by MongoDB
        petId,
        ownerId: owners.find(owner => owner.email === ownerEmail)?._id || "", // Find the owner ID by email
        vetId: id_vet,
      };

      await addMedicalRecordMutation.mutateAsync(newRecord);
    } catch (error) {
      console.error("Error adding medical record:", error);
    }
  };

  if (isOwnersLoading) {
    return <span>Loading owners...</span>;
  }

  if (ownersError) {
    return <span>Error loading owners</span>;
  }

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Thêm bệnh án</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700">Owner</label>
          <select
            value={ownerEmail}
            onChange={(e) => setOwnerEmail(e.target.value)}
            className="mt-1 block w-full border border-gray-300 rounded-md p-2"
            required
          >
            <option value="">Select Owner</option>
            {owners.map((owner) => (
              <option key={owner._id} value={owner.email}>
                {owner.name} - {owner.email}
              </option>
            ))}
          </select>
        </div>
        {ownerEmail && (
          <div>
            <label className="block text-sm font-medium text-gray-700">Pet</label>
            <select
              value={petId}
              onChange={(e) => setPetId(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md p-2"
              required
            >
              <option value="">Select Pet</option>
              {pets.map((pet) => (
                <option key={pet._id} value={pet._id}>
                  {pet.name}
                </option>
              ))}
            </select>
          </div>
        )}
        <button
          type="submit"
          className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600"
        >
          Add Medical Record
        </button>
      </form>
    </div>
  );
};

export default AddRecords;
